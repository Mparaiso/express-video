// Generated by CoffeeScript 1.7.1

/*
    Copyright Â© 2014 mparaiso <mparaiso@online.fr>. All Rights Reserved.
 */
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(container) {
  return container.set('validation', container.share(function() {
    var PlaylistUrl, validation;
    validation = require('mpm.validation');

    /*
        PlaylistUrl
     */
    PlaylistUrl = (function(_super) {
      __extends(PlaylistUrl, _super);

      function PlaylistUrl(_playlistParser) {
        this._playlistParser = _playlistParser;
        PlaylistUrl.__super__.constructor.apply(this, arguments);
      }

      PlaylistUrl.prototype.validateSync = function(value) {
        if (this._playlistParser.isValidUrl(value)) {
          this.setError(null);
          return true;
        } else {
          this.setError(new validation.ValidationError("url " + value + " is not a valid playlist url"));
        }
      };

      PlaylistUrl.prototype.validate = function(value, callback) {
        console.log(arguments);
        if (this._playlistParser.isValidUrl(value)) {
          return callback(null, true);
        } else {
          this.setError(new validation.ValidatorError("url " + value + " is not a valid playlist url"));
          return callback(this.getError());
        }
      };

      return PlaylistUrl;

    })(validation.validators.Base);
    return {
      PlaylistUrl: function(parser) {
        return new PlaylistUrl(parser);
      }
    };
  }));
};

//# sourceMappingURL=validation.map
