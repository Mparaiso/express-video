// Generated by CoffeeScript 1.7.1
"use strict";
var Playlist, Video, async, controllers, database, express, forms, players;

express = require('express');

database = require('./database');

players = require('./players');

Video = database.model('Video');

Playlist = database.model('Playlist');

async = require('async');

forms = require("./forms");

controllers = exports;


/*
    CONTROLLERS
 */

controllers.index = function(req, res, next) {
  return Video.list(function(err, videos) {
    if (err) {
      return next(err);
    } else {
      return res.render('index', {
        videos: videos
      });
    }
  });
};

controllers.videoById = function(req, res, next) {
  return Video.findSimilar(res.locals.video, {
    limit: 8
  }, function(err, videos) {
    var player;
    if (err) {
      err.status = 500;
      return next(err);
    } else {
      player = new players.Youtube(res.locals.video.originalId);
      return res.render('video', {
        videos: videos,
        player: player.render()
      });
    }
  });
};


/*
    VIDEO CRUD
 */

controllers.videoCreate = function(req, res, next) {
  res.locals._csrf = req.csrfToken();
  if (req.method === "POST" && req.body.url) {
    return async.auto({
      video: Video.fromUrl.bind(Video, req.body.url),
      setUser: [
        'video', function(next, result) {
          var video;
          video = result.video[0];
          if (req.user && req.user.id) {
            video.owner = req.user.id;
            return video.save(next);
          } else {
            return next();
          }
        }
      ]
    }, function(err, result) {
      if (err) {
        return res.render('profile/video-create', {
          error: err
        });
      } else {
        return res.redirect('/video/' + result.video[0].id);
      }
    });
  } else {
    return res.render('profile/video-create');
  }
};

controllers.videoFromUrl = function(req, res, next) {
  var url;
  url = req.query.url;
  if (!url) {
    return res.json(500, {
      error: "url query parameter not found"
    });
  } else {
    return Video.fromUrl(url, function(err, result) {
      if (err) {
        return res.json(500, {
          error: "video for url " + url + " not found"
        });
      } else {
        return res.json(result);
      }
    });
  }
};


/*
 * /profile/video/videoId/update
 * user updates a video
 * requires middleware.video
 */

controllers.videoUpdate = function(req, res, next) {
  var form;
  form = forms.Video(req.csrfToken());
  form.bind(res.locals.video);
  if (req.method === "POST") {
    "validation";
  }
  return res.render('profile/video-update', {
    form: form
  });
};


/*
 * /profile/video
 */

controllers.videoList = function(req, res) {
  return Video.findByOwnerId(req.user.id).exec(function(err, videos) {
    if (err) {
      return next(err);
    } else {
      return res.render('profile/video-list', {
        videos: videos
      });
    }
  });
};


/*
    ACCOUNTS
 */

controllers.login = function(req, res, next) {
  var form;
  form = forms.Login(req.csrfToken());
  return res.render('login', {
    form: form
  });
};

controllers.signup = function(req, res) {
  var form, _csrf;
  _csrf = res.locals._csrf = req.csrfToken();
  form = forms.SignUp(_csrf);
  return res.render('signup', {
    form: form
  });
};

controllers.signupPost = function(req, res, next) {
  var form;
  form = forms.SignUp(req.csrfToken());
  form.bind(req.body);
  if (form.validateSync()) {
    req.body.password = req.body.password[0];
    return next();
  } else {
    return res.render('signup', {
      form: form
    });
  }
};

controllers.logout = function(req, res) {
  req.logout();
  return req.session.destroy(function() {
    return res.redirect('/');
  });
};

controllers.profile = function(req, res) {
  return Video.findByOwnerId(req.user.id, function(err, videos) {
    if (err) {
      app.get('monolog').error(err);
    }
    return res.render('profile/index', {
      videos: videos
    });
  });
};

//# sourceMappingURL=controllers.map
