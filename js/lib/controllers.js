// Generated by CoffeeScript 1.7.1
var Category, Playlist, Video, async, controllers, database, express, forms, players, q, _;

express = require('express');

database = require('./database');

players = require('./players');

Video = database.model('Video');

Playlist = database.model('Playlist');

Category = database.model('Category');

async = require('async');

forms = require("./forms");

q = require("q");

_ = require('lodash');


/*
 * CONTROLLERS
 */

controllers = {};

controllers.index = function(req, res, next) {
  return q.all([q.ninvoke(Video, 'findPublicVideos'), Category.whereVideoExist(), Playlist.getLatest()]).spread(function(videos, categories, playlists) {
    return res.render('index', {
      videos: videos,
      categories: categories,
      playlists: playlists
    });
  })["catch"](function(err) {
    return next(err);
  });
};

controllers.videoById = function(req, res, next) {
  return q(Video.findSimilar(res.locals.video, {
    limit: 8
  })).then(function(videos) {
    return res.render('video', {
      videos: videos,
      player: new players.Youtube(res.locals.video.originalId)
    });
  })["catch"](function(err) {
    return next(_.extend(err, {
      status: 500
    }));
  });
};


/*
    VIDEO CRUD
 */

controllers.videoCreate = function(req, res, next) {
  res.locals._csrf = req.csrfToken();
  if (req.method === "POST" && req.body.url) {
    return q().then(function() {
      return q.ninvoke(Video, 'fromUrl', req.body.url, {
        owner: req.user
      });
    }).then(function(video) {
      return res.redirect('/video/' + video.id);
    })["catch"](function(err) {
      return res.render('/profile/video-create', {
        error: err
      });
    });
  } else {
    return res.render('profile/video-create');
  }
};

controllers.videoFromUrl = function(req, res, next) {
  var url;
  url = req.query.url;
  if (!url) {
    return res.json(500, {
      error: "url query parameter not found"
    });
  } else {
    return Video.fromUrl(url, function(err, result) {
      if (err) {
        return res.json(500, {
          error: "video for url " + url + " not found"
        });
      } else {
        return res.json(result);
      }
    });
  }
};


/*
/search
 */

controllers.videoSearch = function(req, res, next) {
  var where;
  where = {
    title: req.query.q ? new RegExp(req.query.q, 'i') : void 0
  };
  return q.ninvoke(Video, 'findPublicVideos', where).then(function(videos) {
    return res.render('search', {
      videos: videos,
      q: req.query.q
    });
  })["catch"](function(err) {
    return next(_.extend(err, {
      status: 500
    }));
  });
};


/*
    PLAYLIST OPERATIONS
 */

controllers.playlistList = function(req, res, next) {
  return q.ninvoke(Playlist, 'findByOwnerId', req.user.id).then(function(playlists) {
    return res.render('profile/playlist-list', {
      playlists: playlists
    });
  })["catch"](function(err) {
    return next(_.extend(err, [
      {
        status: 500
      }
    ]));
  });
};

controllers.playlistCreate = function(req, res, next) {
  var form, playlist;
  playlist = new Playlist();
  form = forms.Playlist();
  form.setModel(playlist);
  if (req.method === "POST") {
    form.bind(req.body);
    if (form.validateSync()) {
      playlist.owner = req.user.id;
      return playlist.save(function(err, playlist) {
        if (err) {
          err.status = 500;
          return next(err);
        } else {
          return res.redirect('/playlist/' + playlist.id);
        }
      });
    }
  }
  return res.render('profile/playlist-create', {
    form: form
  });
};


/*
 * /profile/playlist/:playlistId/update
 */

controllers.playlistUpdate = function(req, res, next) {
  var form, playlist;
  playlist = res.locals.playlist;
  form = res.locals.container.forms.Playlist();
  form.setModel(playlist);
  if (req.method === "POST") {
    form.bind(req.body);
    if (form.validateSync()) {
      return playlist.save(function(err, playlist) {
        if (err) {
          return next(err);
        } else {
          return res.redirect('/playlist/'.concat(playlist.id));
        }
      });
    }
  }
  return res.render('profile/playlist-update', {
    form: form,
    playlist: playlist
  });
};


/*
 * /profile/playlist/:playlistId/delete
 */

controllers.playlistRemove = function(req, res, next) {
  return q.ninvoke(res.locals.playlist, 'remove').then((function() {
    return res.redirect('/playlist');
  }), next);
};


/*
 * PLAYLIST
 */

controllers.playlistById = function(req, res, next) {
  return q().then(function() {
    var playlist, video;
    playlist = res.locals.playlist;
    video = _.find(playlist.videos, function(v) {
      return v.id === req.query.videoId;
    }) || playlist.getFirstVideo();
    return [
      q.ninvoke(Video, 'populate', video, {
        path: "owner category"
      }), new players.Youtube(video.originalId), playlist
    ];
  }).spread(function(video, player, playlist) {
    return res.render('playlist', {
      playlist: playlist,
      video: video,
      player: player
    });
  }).done(_.noop, function(err) {
    return next(err);
  });
};


/*
 * /profile/video/videoId/update
 * user updates a video
 * requires middleware.video
 */

controllers.videoUpdate = function(req, res, next) {
  var form;
  form = forms.Video();
  form.setModel(res.locals.video);
  if (req.method === "POST") {
    form.bind(req.body);
    if (form.validateSync()) {
      return res.locals.video.save(function(err) {
        if (err) {
          err.status = 500;
          next(err);
        }
        return res.redirect('/video/' + req.params.videoId);
      });
    }
  }
  return res.render('profile/video-update', {
    form: form
  });
};


/*
 * /profile/videoRemove/:videoId/remove
 */

controllers.videoRemove = function(req, res, next) {
  return res.locals.video.remove(function(err) {
    if (err) {
      err.status = 500;
      return next(err);
    } else {
      req.flash('success', 'Video removed');
      return res.redirect('/profile/video');
    }
  });
};


/*
 * /profile/video
 */

controllers.videoList = function(req, res) {
  return Video.findByOwnerId(req.user.id).exec(function(err, videos) {
    if (err) {
      return next(err);
    } else {
      return res.render('profile/video-list', {
        videos: videos
      });
    }
  });
};


/*
 * CATEGORIES
 */

controllers.categoryById = function(req, res, next) {
  return q.all([
    Category.findById(req.params.categoryId).exec(), Video.find({
      category: req.params.categoryId
    }).exec(), Playlist.getLatest()
  ]).spread(function(category, videos, playlists) {
    return res.render('index', {
      videos: videos,
      category: category,
      playlists: playlists,
      pageTitle: "Latest Videos in " + category.title
    });
  })["catch"](function(err) {
    return next(err);
  });
};


/*
    ACCOUNTS
 */

controllers.login = function(req, res, next) {
  var form;
  form = forms.Login(req.csrfToken());
  return res.render('login', {
    form: form
  });
};

controllers.signup = function(req, res) {
  var form, _csrf;
  _csrf = res.locals._csrf = req.csrfToken();
  form = forms.SignUp(_csrf);
  return res.render('signup', {
    form: form
  });
};

controllers.signupPost = function(req, res, next) {
  var form;
  form = forms.SignUp(req.csrfToken());
  form.bind(req.body);
  if (form.validateSync()) {
    req.body.password = req.body.password[0];
    return next();
  } else {
    return res.render('signup', {
      form: form
    });
  }
};

controllers.logout = function(req, res) {
  req.logout();
  return req.session.destroy(function() {
    return res.redirect('/');
  });
};

controllers.profile = function(req, res, ext) {
  return q.all([q.ninvoke(Video, 'findByOwnerId', req.user.id), q.ninvoke(Playlist, 'findByOwnerId', req.user.id)]).spread(function(videos, playlists) {
    return res.render('profile/index', {
      videos: videos,
      playlists: playlists
    });
  })["catch"](function(err) {
    return next(_.extend(err, {
      status: 500
    }));
  });
};

module.exports = controllers;

//# sourceMappingURL=controllers.map
