// Generated by CoffeeScript 1.7.1
var Playlist, Video, async, controllers, database, express, forms, players, q, _;

express = require('express');

database = require('./database');

players = require('./players');

Video = database.model('Video');

Playlist = database.model('Playlist');

async = require('async');

forms = require("./forms");

q = require("q");

_ = require('lodash');


/*
 * CONTROLLERS
 */

controllers = {};

controllers.index = function(req, res, next) {
  return Video.findPublicVideos(function(err, videos) {
    if (err) {
      return next(err);
    } else {
      return res.render('index', {
        videos: videos
      });
    }
  });
};

controllers.videoById = function(req, res, next) {
  return Video.findSimilar(res.locals.video, {
    limit: 8
  }, function(err, videos) {
    var player;
    if (err) {
      return (err.status = 500) && next(err);
    } else {
      player = new players.Youtube(res.locals.video.originalId);
      return res.render('video', {
        videos: videos,
        player: player
      });
    }
  });
};


/*
    VIDEO CRUD
 */

controllers.videoCreate = function(req, res, next) {
  res.locals._csrf = req.csrfToken();
  if (req.method === "POST" && req.body.url) {
    return async.auto({
      video: Video.fromUrl.bind(Video, req.body.url),
      setUser: [
        'video', function(next, result) {
          var video;
          video = result.video[0];
          if (req.user && req.user.id) {
            video.owner = req.user.id;
            return video.save(next);
          } else {
            return next();
          }
        }
      ]
    }, function(err, result) {
      if (err) {
        return res.render('profile/video-create', {
          error: err
        });
      } else {
        return res.redirect('/video/' + result.video[0].id);
      }
    });
  } else {
    return res.render('profile/video-create');
  }
};

controllers.videoFromUrl = function(req, res, next) {
  var url;
  url = req.query.url;
  if (!url) {
    return res.json(500, {
      error: "url query parameter not found"
    });
  } else {
    return Video.fromUrl(url, function(err, result) {
      if (err) {
        return res.json(500, {
          error: "video for url " + url + " not found"
        });
      } else {
        return res.json(result);
      }
    });
  }
};


/*
/search
 */

controllers.videoSearch = function(req, res, next) {
  var where;
  where = {};
  if (req.query.q) {
    where.title = new RegExp(req.query.q, 'i');
  }
  return Video.findPublicVideos(where, function(err, videos) {
    if (err) {
      err.status = 500;
      return next(err);
    } else {
      return res.render('search', {
        videos: videos,
        q: req.query.q
      });
    }
  });
};


/*
/profile/playlist
 */

controllers.playlistList = function(req, res, next) {
  return Playlist.findByOwnerId(req.user.id, function(err, playlists) {
    if (err) {
      err.status = 500;
      return next(err);
    } else {
      return res.render('profile/playlist-list', {
        playlists: playlists
      });
    }
  });
};


/*
    PLAYLIST OPERATIONS
 */

controllers.playlistCreate = function(req, res, next) {
  var form, playlist;
  playlist = new Playlist();
  form = forms.Playlist();
  form.setModel(playlist);
  if (req.method === "POST") {
    form.bind(req.body);
    if (form.validateSync()) {
      playlist.owner = req.user.id;
      return playlist.save(function(err, playlist) {
        if (err) {
          err.status = 500;
          return next(err);
        } else {
          return res.redirect('/playlist/' + playlist.id);
        }
      });
    }
  }
  return res.render('profile/playlist-create', {
    form: form
  });
};


/*
 * /profile/playlist/:playlistId/update
 */

controllers.playlistUpdate = function(req, res, next) {
  var form, playlist;
  playlist = res.locals.playlist;
  form = res.locals.container.forms.Playlist();
  form.setModel(playlist);
  if (req.method === "POST") {
    form.bind(req.body);
    if (form.validateSync()) {
      return playlist.save(function(err, playlist) {
        if (err) {
          return next(err);
        } else {
          return res.redirect('/playlist/'.concat(playlist.id));
        }
      });
    }
  }
  return res.render('profile/playlist-update', {
    form: form,
    playlist: playlist
  });
};


/*
 * /profile/playlist/:playlistId/delete
 */

controllers.playlistRemove = function(req, res, next) {
  return q.ninvoke(res.locals.playlist, 'remove').then((function() {
    return res.redirect('/playlist');
  }), next);
};


/*
 * /playlist/:playlistId/video/:videoId
 */

controllers.playlistById = function(req, res, next) {
  var player, playlist, video;
  playlist = res.locals.playlist;
  video = _.find(playlist.videos, function(v) {
    return v.id === req.query.videoId;
  }) || playlist.getFirstVideo();
  if (video) {
    player = new players.Youtube(video.originalId);
  }
  return res.render('playlist', {
    playlist: playlist,
    video: video,
    player: player
  });
};


/*
 * /profile/video/videoId/update
 * user updates a video
 * requires middleware.video
 */

controllers.videoUpdate = function(req, res, next) {
  var form;
  form = forms.Video();
  form.setModel(res.locals.video);
  if (req.method === "POST") {
    form.bind(req.body);
    if (form.validateSync()) {
      return res.locals.video.save(function(err) {
        if (err) {
          err.status = 500;
          next(err);
        }
        return res.redirect('/video/' + req.params.videoId);
      });
    }
  }
  return res.render('profile/video-update', {
    form: form
  });
};


/*
 * /profile/videoRemove/:videoId/remove
 */

controllers.videoRemove = function(req, res, next) {
  return res.locals.video.remove(function(err) {
    if (err) {
      err.status = 500;
      return next(err);
    } else {
      req.flash('success', 'Video removed');
      return res.redirect('/profile/video');
    }
  });
};


/*
 * /profile/video
 */

controllers.videoList = function(req, res) {
  return Video.findByOwnerId(req.user.id).exec(function(err, videos) {
    if (err) {
      return next(err);
    } else {
      return res.render('profile/video-list', {
        videos: videos
      });
    }
  });
};


/*
    ACCOUNTS
 */

controllers.login = function(req, res, next) {
  var form;
  form = forms.Login(req.csrfToken());
  return res.render('login', {
    form: form
  });
};

controllers.signup = function(req, res) {
  var form, _csrf;
  _csrf = res.locals._csrf = req.csrfToken();
  form = forms.SignUp(_csrf);
  return res.render('signup', {
    form: form
  });
};

controllers.signupPost = function(req, res, next) {
  var form;
  form = forms.SignUp(req.csrfToken());
  form.bind(req.body);
  if (form.validateSync()) {
    req.body.password = req.body.password[0];
    return next();
  } else {
    return res.render('signup', {
      form: form
    });
  }
};

controllers.logout = function(req, res) {
  req.logout();
  return req.session.destroy(function() {
    return res.redirect('/');
  });
};

controllers.profile = function(req, res, ext) {
  return async.parallel({
    videos: Video.findByOwnerId.bind(Video, req.user.id),
    playlists: Playlist.findByOwnerId.bind(Playlist, req.user.id)
  }, function(err, results) {
    if (err) {
      err.status = 500;
      return next(err);
    } else {
      return res.render('profile/index', {
        videos: results.videos,
        playlists: results.playlists
      });
    }
  });
};

module.exports = controllers;

//# sourceMappingURL=controllers.map
