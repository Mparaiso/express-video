// Generated by CoffeeScript 1.7.1
var Playlist, Rest, Video, database, express, players, routes;

Rest = require('mpm.express.rest');

express = require('express');

database = require('./database');

players = require('./players');

Video = database.model('Video');

Playlist = database.model('Playlist');

routes = {
  "/api": {
    "/video": {
      use: (function() {
        var controller;
        controller = new Rest.Controller(express());
        controller.setAdapter(new Rest.adapter.MongooseAdapter(Video));
        return controller.handle();
      })(),
      ".fromUrl": {
        post: function(req, res, next) {
          var url;
          url = req.query.url;
          if (!url) {
            return res.json(500, {
              error: "url query parameter not found"
            });
          } else {
            return Video.fromUrl(url, function(err, result) {
              if (err) {
                return res.json(500, {
                  error: "video for url " + url + " not found"
                });
              } else {
                return res.json(result);
              }
            });
          }
        }
      }
    },
    "/playlist": {
      use: (function() {
        var controller;
        controller = new Rest.Controller(express());
        controller.setAdapter(new Rest.adapter.MongooseAdapter(Playlist));
        return controller.handle();
      })()
    }
  },
  "/": {
    get: function(req, res, next) {
      return Video.find().select('title thumbnail created_at owner').sort({
        created_at: -1
      }).exec(function(err, videos) {
        if (err) {
          return next(err);
        } else {
          return res.render('index', {
            videos: videos
          });
        }
      });
    }
  },
  "/video/:id": {
    get: function(req, res, next) {
      return Video.findOne({
        _id: req.params.id
      }, function(err, video) {
        var player;
        if (err) {
          res.status(500);
          return next(err);
        } else if (video) {
          player = new players.Youtube(video.originalId);
          return res.render('video', {
            video: video,
            player: player.render()
          });
        } else {
          res.status(404);
          return next();
        }
      });
    }
  }
};

module.exports = routes;

//# sourceMappingURL=routes.map
