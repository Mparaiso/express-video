// Generated by CoffeeScript 1.7.1
var Playlist, Rest, Video, async, database, express, isLoggedIn, players, routes;

Rest = require('mpm.express.rest');

express = require('express');

database = require('./database');

players = require('./players');

Video = database.model('Video');

Playlist = database.model('Playlist');

async = require('async');


/* SOME MIDDLEWARES */


/* route middleware to check user status */

isLoggedIn = function(req, res, next) {
  if (req.isAuthenticated()) {
    return next();
  } else {
    return res.redirect('/login');
  }
};


/*
 A map of routes
 */

routes = {
  "/api": {

    /* video api */
    "/video": {
      use: (function() {
        var controller;
        controller = new Rest.Controller(express());
        controller.setAdapter(new Rest.adapter.MongooseAdapter(Video));
        return controller.handle();
      })(),

      /* create resource from url */
      ".fromUrl": {
        post: function(req, res, next) {
          var url;
          url = req.query.url;
          if (!url) {
            return res.json(500, {
              error: "url query parameter not found"
            });
          } else {
            return Video.fromUrl(url, function(err, result) {
              if (err) {
                return res.json(500, {
                  error: "video for url " + url + " not found"
                });
              } else {
                return res.json(result);
              }
            });
          }
        }
      }
    },

    /* playlist api */
    "/playlist": {
      use: (function() {
        var controller;
        controller = new Rest.Controller(express());
        controller.setAdapter(new Rest.adapter.MongooseAdapter(Playlist));
        return controller.handle();
      })()
    }
  },

  /* index page */
  "/": {
    get: function(req, res, next) {
      return Video.find().select('title thumbnail created_at owner').sort({
        created_at: -1
      }).exec(function(err, videos) {
        if (err) {
          return next(err);
        } else {
          return res.render('index', {
            videos: videos
          });
        }
      });
    }
  },

  /* get video by id */
  "/video/:id": {
    get: function(req, res, next) {
      return async.auto({
        video: function(next) {
          return Video.findOne({
            _id: req.params.id
          }).exec(next);
        },
        videos: [
          'video', function(next, res) {
            var err;
            if (!res.video) {
              err = new Error('Video not found');
              err.status = 404;
              return next(err);
            } else {
              return Video.findSimilar(res.video, {
                limit: 8
              }, next);
            }
          }
        ]
      }, function(err, result) {
        var player;
        if (err) {
          res.status(err.status || 500);
          return next(err);
        } else if (result.video) {
          player = new players.Youtube(result.video.originalId);
          return res.render('video', {
            video: result.video,
            videos: result.videos,
            player: player.render()
          });
        } else {
          res.status(404);
          return next();
        }
      });
    }
  },
  "/login": {
    get: function(req, res) {
      return res.render('login', {
        message: req.flash('loginMessage')
      });
    }
  },
  "/signup": {
    get: function(req, res) {
      return res.render('signup', {
        message: req.flash('signupMessage')
      });
    }
  },
  "/profile": {
    get: [
      isLoggedIn, function(req, res) {
        return res.render('profile', {
          user: req.user
        });
      }
    ]
  },
  "/logout": {
    get: function(req, res) {
      req.logout();
      return res.redirect('/');
    }
  }
};

module.exports = routes;

//# sourceMappingURL=routes.map
