// Generated by CoffeeScript 1.7.1
var Playlist, Rest, Video, async, cache, csrf, database, express, flash, forms, isLoggedIn, players, routes, user, validateSignupForm;

Rest = require('mpm.express.rest');

express = require('express');

database = require('./database');

players = require('./players');

Video = database.model('Video');

Playlist = database.model('Playlist');

async = require('async');

forms = require("./forms");

csrf = express.csrf();

routes = exports;


/* SOME MIDDLEWARES */

user = function(req, res, next) {
  res.locals.user = req.user;
  return next();
};


/* route middleware to check user status */

isLoggedIn = function(req, res, next) {
  if (req.isAuthenticated()) {
    return next();
  } else {
    return res.redirect('/login');
  }
};

cache = function(req, res, next) {
  if (req.method === "GET" && req.app.get('env') === "production") {
    res.header('Cache-Control', "max-age=" + 120);
    res.header('X-Powered-By', 'mparaiso mparaiso@online.fr');
  }
  return next();
};

validateSignupForm = function(req, res, next) {
  var form;
  form = forms.SignUp(req.csrfToken());
  form.bind(req.body);
  if (form.validateSync()) {
    console.log('form is valid');
    req.body.password = req.body.password[0];
    return next();
  } else {
    console.log('form is not valid');
    return res.render('signup', {
      form: form
    });
  }
};

flash = function(req, res, next) {
  res.locals.flash = req.flash();
  return next();
};


/*
 A map of routes
 */

routes._getMap = function() {
  return {
    use: [user, flash],
    "/api/video": {
      use: (function() {
        var controller;
        controller = new Rest.Controller(express());
        controller.setAdapter(new Rest.adapter.MongooseAdapter(Video));
        return controller.handle();
      })()
    },
    "/api/video.fromUrl": {
      post: function(req, res, next) {
        var url;
        url = req.query.url;
        if (!url) {
          return res.json(500, {
            error: "url query parameter not found"
          });
        } else {
          return Video.fromUrl(url, function(err, result) {
            if (err) {
              return res.json(500, {
                error: "video for url " + url + " not found"
              });
            } else {
              return res.json(result);
            }
          });
        }
      }
    },
    "/api/playlist": {
      use: (function() {
        var controller;
        controller = new Rest.Controller(express());
        controller.setAdapter(new Rest.adapter.MongooseAdapter(Playlist));
        return controller.handle();
      })()
    },

    /* index page */
    "/": {
      get: [
        cache, function(req, res, next) {
          return Video.list(function(err, videos) {
            if (err) {
              return next(err);
            } else {
              return res.render('index', {
                videos: videos
              });
            }
          });
        }
      ]
    },

    /* get video by id */
    "/video/:id": {
      get: [
        cache, function(req, res, next) {
          return async.auto({
            video: function(next) {
              return Video.findOne({
                _id: req.params.id
              }).populate('owner').exec(next);
            },
            videos: [
              'video', function(next, res) {
                var err;
                if (!res.video) {
                  err = new Error('Video not found');
                  err.status = 404;
                  return next(err);
                } else {
                  return Video.findSimilar(res.video, {
                    limit: 8
                  }, next);
                }
              }
            ]
          }, function(err, result) {
            var player;
            if (err) {
              res.status(err.status || 500);
              return next(err);
            } else if (result.video) {
              player = new players.Youtube(result.video.originalId);
              return res.render('video', {
                video: result.video,
                videos: result.videos,
                player: player.render()
              });
            } else {
              res.status(404);
              return next();
            }
          });
        }
      ]
    },
    "/profile/video/new": {
      all: [
        isLoggedIn, function(req, res, next) {
          if (req.method === "POST" && req.body.url) {
            return async.auto({
              video: Video.fromUrl.bind(Video, req.body.url),
              setUser: [
                'video', function(next, result) {
                  var video;
                  video = result.video[0];
                  if (req.user && req.user.id) {
                    video.owner = req.user.id;
                    return video.save(next);
                  } else {
                    return next();
                  }
                }
              ]
            }, function(err, result) {
              if (err) {
                return res.render('accounts/video-create', {
                  error: err
                });
              } else {
                return res.redirect('/video/' + result.video[0].id);
              }
            });
          } else {
            return res.render('accounts/video-create');
          }
        }
      ]
    },
    "/login": {
      get: [
        csrf, function(req, res, next) {
          var form;
          form = forms.Login(req.csrfToken());
          return res.render('login', {
            form: form
          });
        }
      ],
      post: this.passport.authenticate('local-login', {
        successRedirect: '/profile',
        failureRedirect: '/login',
        failureFlash: true
      })
    },
    "/signup": {
      get: [
        csrf, function(req, res) {
          var form, _csrf;
          _csrf = req.csrfToken();
          form = forms.SignUp(_csrf);
          return res.render('signup', {
            form: form
          });
        }
      ],
      post: [
        csrf, validateSignupForm, this.passport.authenticate('local-signup', {
          successRedirect: '/profile',
          failureRedirect: '/signup',
          failureFlash: true
        })
      ]
    },
    "/profile": {
      get: [
        isLoggedIn, function(req, res) {
          return res.render('profile');
        }
      ]
    },
    "/logout": {
      get: function(req, res) {
        req.logout();
        return res.redirect('/');
      }
    }
  };
};

Object.defineProperty(routes, 'map', {
  get: function() {
    return this._getMap();
  }
});

Object.defineProperty(routes, 'passport', {
  get: function() {
    return this._passport;
  },
  set: function(p) {
    return this._passport = p;
  }
});

//# sourceMappingURL=routes.map
