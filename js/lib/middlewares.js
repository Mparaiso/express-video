// Generated by CoffeeScript 1.7.1
"use strict";
var Playlist, Rest, Video, database, express, forms, middlewares;

forms = require('./forms');

Rest = require('mpm.express.rest');

express = require('express');

database = require('./database');

Video = database.model('Video');

Playlist = database.model('Playlist');

middlewares = exports;


/* 
    MIDDLEWARES
 */


/*
    Makes the csrf token mandatory
    add _csrf to res.locals and headers
 */

middlewares.csrf = (function() {
  var csrf;
  csrf = express.csrf();
  return function(req, res, next) {
    return csrf(req, res, function(err) {
      if (err) {
        return next(err);
      } else {
        res.locals._csrf = req.csrfToken();
        res.set('_csrf', res.locals._csrf);
        return next();
      }
    });
  };
})();

middlewares.video = function(req, res, next, id) {
  return Video.findById(id).select('title description duration thumbnail owner originalId categoryId').populate('owner').exec(function(err, video) {
    if (err) {
      err.status = 500;
      next(err);
    }
    if (!video) {
      err = new Error('Video not found');
      err.status = 404;
      return next(err);
    } else {
      res.locals.video = video;
      return next();
    }
  });
};

middlewares.belongsToUser = function(model, param) {
  return function(req, res, next) {
    return model.findOne({
      _id: res.locals[param].id,
      owner: req.user.id
    }).exec(function(err, res) {
      if (err) {
        err.status = 403;
        return next(err);
      } else if (!res) {
        err = new Error("Access to resource " + param + " for " + req.user + " forbidden");
        return next(err);
      } else {
        return next();
      }
    });
  };
};

middlewares.user = function(req, res, next) {
  res.locals.user = req.user;
  return next();
};

middlewares.isLoggedIn = function(req, res, next) {
  if (req.isAuthenticated()) {
    return next();
  } else {
    return res.redirect('/login');
  }
};

middlewares.cache = function(req, res, next) {
  if (req.method === "GET" && req.app.get('env') === "production") {
    res.header('Cache-Control', "max-age=" + 5);
    res.header('X-Powered-By', 'mparaiso mparaiso@online.fr');
  }
  return next();
};

middlewares.flash = function(req, res, next) {
  res.locals.flash = req.flash();
  return next();
};

middlewares.videoApi = (function() {
  var controller;
  controller = new Rest.Controller(express());
  controller.setAdapter(new Rest.adapter.MongooseAdapter(Video));
  return controller.handle();
})();

middlewares.playlistApi = (function() {
  var controller;
  controller = new Rest.Controller(express());
  controller.setAdapter(new Rest.adapter.MongooseAdapter(Playlist));
  return controller.handle();
})();


/*
error handlers
@see https://github.com/visionmedia/express/blob/master/examples/error-pages/index.js
 */

middlewares.notFound = function(req, res) {
  res.status(404);
  return res.render('404', {
    code: res.statusCode
  });
};

middlewares.serverError = function(err, req, res, next) {
  req.app.get('monolog').error(err);
  res.status(err.status || 500);
  return res.render('500');
};

//# sourceMappingURL=middlewares.map
