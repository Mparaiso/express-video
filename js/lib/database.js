// Generated by CoffeeScript 1.7.1
var Playlist, PlaylistSchema, User, UserSchema, Video, VideoSchema, YoutubeVideo, async, config, connection, mongoose, parsers, util;

mongoose = require('mongoose');

parsers = require('./parsers');

util = require('util');

config = require('./config');

async = require('async');

YoutubeVideo = parsers.YoutubeVideo;

connection = mongoose.connect(config.connection_string);

connection.set('debug', config.mongoose_debug);

UserSchema = mongoose.Schema({
  nickname: String
});

User = mongoose.model('User', UserSchema);

VideoSchema = mongoose.Schema({
  url: {
    type: String
  },
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  title: String,
  description: String,
  categoryId: Number,
  duration: Object,
  created_at: {
    type: Date,
    "default": Date.now
  },
  updated_at: {
    type: Date,
    "default": Date.now
  },
  publishedAt: {
    type: Date,
    "default": Date.now
  },
  originalId: String,
  provider: String,
  thumbnail: String,
  meta: Object
});


/* create video from video url */

VideoSchema.statics.fromUrl = function(url, callback) {
  var youtubeVideo;
  youtubeVideo = new YoutubeVideo(config.youtube_apikey);
  if (youtubeVideo.isValidUrl(url)) {
    return youtubeVideo.getVideoDataFromUrl(url, function(err, res) {
      var video;
      if (err) {
        return callback(new Error(util.format("Video with url %s not found", url)));
      } else {
        video = new Video(res);
        return video.save(callback);
      }
    });
  } else {
    return callback(new Error(util.format("Video with url %s not found", url)));
  }
};

VideoSchema.methods.toString = function() {
  return this.title;
};


/*
 * find Similar 
 * @param  {Video}   video   
 * @param  {Object}   options  
 * @param  {Function} callback
 */

VideoSchema.statics.findSimilar = function(video, options, callback) {
  if (arguments.length === 2) {
    callback = options;
    options = {};
  }
  return this.find({
    categoryId: video.categoryId,
    _id: {
      '$ne': video.id
    }
  }, null, options, function(err, res) {
    return callback(err, res);
  });
};

Video = mongoose.model('Video', VideoSchema);

PlaylistSchema = mongoose.Schema({
  title: String,
  description: String,
  videos: [VideoSchema]
});

Playlist = mongoose.model('Playlist', PlaylistSchema);

module.exports = mongoose;

//# sourceMappingURL=database.map
