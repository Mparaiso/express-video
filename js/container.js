// Generated by CoffeeScript 1.7.1
"use strict";
var CONFIG_PATH, Pimple, container, database, express, monolog, path, routes, swig, util;

express = require('express');

Pimple = require('pimple');

swig = require('swig');

monolog = require('monolog');

util = require('util');

database = require('./lib/database');

routes = require('./lib/routes');

path = require('path');

CONFIG_PATH = path.join(__dirname, "..", "config");

container = new Pimple({
  port: process.env.PORT || 3000,
  youtub_api_key: process.env.EXPRESS_VIDEO_YOUTUBE_API_KEY,
  connection_string: process.env.EXPRESS_VIDEO_MONGODB_CONNECTION_STRING,
  debug: process.env.NODE_ENV === "production" ? false : true
});

container.set("app", container.share(function() {
  var app;
  app = express();
  app.configure(function() {
    app.engine('html', container.swig.renderFile);
    app.set('view engine', 'html');
    app.locals(container.locals);
    app.use(express["static"](path.join(__dirname, "..", "public")));
    app.use(express.json());
    app.use(express.favicon());
    return app.disable("verbose errors");
  });
  app.configure('development', function() {
    app.use(express.logger("dev"));
    app.use(container.logger.middleware(app));
    return app.enable('verbose errors');
  });
  app.configure('testing', function() {
    return container.set('connection_string', process.env.EXPRESS_VIDEO_MONGODB_CONNECTION_STRING_TEST);
  });

  /*
  route map mixin
  mount routes with a single object
  @param routes
  @param prefix
   */
  app.map = function(routes, prefix) {
    var key, value;
    if (prefix == null) {
      prefix = "";
    }
    for (key in routes) {
      value = routes[key];
      switch (typeof value) {
        case "object":
          if (value instanceof Array && value.every(function(r) {
            return r instanceof Function;
          })) {
            value.unshift(prefix);
            this[key].apply(this, value);
          } else {
            this.map(value, prefix + key);
          }
          break;
        case "function":
          this[key].apply(this, [prefix, value]);
      }
    }
    return this;
  };

  /*
      basic caching
   */
  app.use(function(req, res, next) {
    if (req.method === "GET") {
      res.header('Cache-Control', "max-age=" + 120);
      res.header('X-Powered-By', 'mparaiso mparaiso@online.fr');
    }
    return next();
  });
  app.map(container.routes);

  /* 
      error handlers 
      @see https://github.com/visionmedia/express/blob/master/examples/error-pages/index.js
   */
  app.use(function(req, res, next) {
    res.status(404);
    return res.render('404', {
      code: res.statusCode
    });
  });
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    return res.render('500');
  });
  return app;
}));

container.set("locals", container.share(function() {
  return {
    title: "mpm.video",
    paginate: function(array, length, start) {
      var divisions, _i, _results;
      if (start == null) {
        start = 0;
      }
      divisions = Math.ceil(array.length / length);
      return (function() {
        _results = [];
        for (var _i = start; start <= divisions ? _i < divisions : _i > divisions; start <= divisions ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(i) {
        return array.slice(i * length, i * length + length);
      });
    }
  };
}));


/*
    TEMPLATE
 */

container.set("swig", container.share(function() {
  swig.setDefaults({
    cache: 'memory'
  });
  return swig;
}));


/*
    CONFIG
 */

container.set("config", container.share(function() {
  return require(CONFIG_PATH);
}));


/*
    ROUTING
 */

container.set("routes", container.share(function() {
  return routes;
}));


/*
    DATABASE
 */

container.set("db", container.share(function() {
  database.set("debug", container.debug);
  return database;
}));

container.set("User", container.share(function() {
  return container.db.model('User');
}));

container.set("Video", container.share(function() {
  return container.db.model('Video');
}));

container.set("Playlist", container.share(function() {
  return container.db.model('Playlist');
}));


/*
    LOGGER
 */

container.set("logger", container.share(function() {
  var logger;
  logger = new monolog.Logger("express logger");
  logger.addHandler(new monolog.handler.StreamHandler(__dirname + "/../temp/log.txt"));
  logger.middleware = function(app, message) {
    var F;
    if (message == null) {
      message = "debug";
    }
    logger.addProcessor(new monolog.processor.ExpressProcessor(app));
    app.set('logger', logger);
    F = function(req, res, next) {
      logger.debug("" + message + " " + req.method + " " + req.path);
      return next();
    };
    F.logger = logger;
    return F;
  };
  return logger;
}));


/*
    LAUNCH APPLICATION
 */

if (!module.parent) {
  container.app.listen(container.port, function() {
    return console.log("listening on port " + container.port);
  });
} else {
  module.exports = container;
}

//# sourceMappingURL=container.map
