// Generated by CoffeeScript 1.7.1
"use strict";
var Pimple, Rest, YoutubeVideo, container, express, mongolog, mongoose, swig, util;

Rest = require('mpm.express.rest');

express = require('express');

Pimple = require('pimple');

swig = require('swig');

mongoose = require('mongoose');

mongolog = require('monolog');

util = require('util');

YoutubeVideo = require('./lib/parsers').YoutubeVideo;

container = new Pimple({
  port: process.env.PORT || 3000,
  youtub_api_key: process.env.EXPRESS_VIDEO_YOUTUBE_API_KEY,
  connection_string: process.env.EXPRESS_VIDEO_MONGODB_CONNECTION_STRING,
  debug: process.env.NODE_ENV === "production" ? false : true
});

container.set("app", container.share(function() {
  var app;
  app = express();
  app.configure(function() {
    app.use(express.json());
    app.engine('html', swig.renderFile);
    app.set('view engine', 'html');
    return app.locals(container.locals);
  });
  app.configure('development', function() {
    app.use(express.logger());
    return app.use(container.logger.middleware(app));
  });
  app.configure('testing', function() {
    return container.set('connection_string', process.env.EXPRESS_VIDEO_MONGODB_CONNECTION_STRING_TEST);
  });
  app.use('/api/video', container.routes.videoApi);
  app.post('/api/video.fromUrl', container.routes.fromUrl);
  app.use('/api/playlist', container.routes.playlistApi);
  return app.get('/', container.routes.index);
}));

container.set("locals", container.share(function() {
  return {
    title: "mpm.video"
  };
}));


/*
    ROUTING
 */

container.set("routes", container.share(function() {
  var routes;
  return routes = {
    videoApi: (function() {
      var controller;
      controller = new Rest.Controller(express());
      controller.setAdapter(new Rest.adapter.MongooseAdapter(container.Video));
      return controller.handle();
    })(),
    playlistApi: (function() {
      var controller;
      controller = new Rest.Controller(express());
      controller.setAdapter(new Rest.adapter.MongooseAdapter(container.Playlist));
      return controller.handle();
    })(),
    fromUrl: function(req, res, next) {
      var url;
      url = req.query.url;
      if (!url) {
        return res.json(500, {
          error: "url query parameter not found"
        });
      } else {
        return container.Video.fromUrl(url, function(err, result) {
          if (err) {
            return res.json(500, {
              error: "video for url " + url + " not found"
            });
          } else {
            return res.json(result);
          }
        });
      }
    },
    index: function(req, res) {
      return res.end(container.app.locals.title);
    }
  };
}));


/*
    DATABASE
 */

container.set("db", container.share(function() {
  mongoose.set("debug", container.debug);
  mongoose.connect(container.connection_string);
  return mongoose;
}));

container.set("UserSchema", container.share(function() {
  return container.db.Schema({
    nickname: String
  });
}));

container.set("User", container.share(function() {
  return container.db.model('User', container.UserSchema);
}));

container.set("VideoSchema", container.share(function() {
  var VideoSchema;
  VideoSchema = container.db.Schema({
    url: {
      type: String
    },
    owner: {
      type: container.db.Schema.Types.ObjectId,
      ref: 'User'
    },
    title: String,
    description: String,
    duration: Object,
    publishedAt: {
      type: Date,
      "default": Date.now
    },
    originalId: String,
    provider: String,
    thumbnail: String,
    meta: Object
  });

  /* create video from video url */
  VideoSchema.statics.fromUrl = function(url, callback) {
    var youtubeVideo;
    youtubeVideo = new YoutubeVideo(process.env.EXPRESS_VIDEO_YOUTUBE_API_KEY);
    if (youtubeVideo.isValidUrl(url)) {
      return youtubeVideo.getVideoDataFromUrl(url, function(err, res) {
        var video;
        if (err) {
          return callback(new Error(util.format("Video with url %s not found", url)));
        }
        video = new container.Video(res);
        return video.save(callback);
      });
    } else {
      return callback(new Error(util.format("Video with url %s not found", url)));
    }
  };
  return VideoSchema;
}));

container.set("Video", container.share(function() {
  return container.db.model('Video', container.VideoSchema);
}));

container.set("PlaylistSchema", container.share(function() {
  return container.db.Schema({
    title: String,
    description: String,
    videos: [container.VideoSchema]
  });
}));

container.set("Playlist", container.share(function() {
  return container.db.model('Playlist', container.PlaylistSchema);
}));


/*
    LOGGER
 */

container.set("logger", container.share(function() {
  var logger;
  logger = new monolog.Logger("express logger");
  logger.addHandler(new monolog.handler.StreamHandler(__dirname + "/../temp/log.txt"));
  logger.middleware = function(app, message) {
    var F;
    if (message == null) {
      message = "debug";
    }
    logger.addProcessor(new monolog.processor.ExpressProcessor(app));
    app.set('logger', logger);
    F = function(req, res, next) {
      logger.debug(message);
      return next();
    };
    F.logger = logger;
    return F;
  };
  return logger;
}));


/*
    LAUNCH APPLICATION
 */

if (!module.parent) {
  container.app.listen(container.port, function() {
    return console.log("listening on port " + container.port);
  });
} else {
  module.exports = container;
}

//# sourceMappingURL=container.map
