// Generated by CoffeeScript 1.7.1
"use strict";
var config, container, database, events, express, flash, forms, monolog, passport, path, pimple, routes, sessionStores, swig, util;

express = require('express');

pimple = require('pimple');

swig = require('swig');

monolog = require('monolog');

util = require('util');

database = require('./lib/database');

routes = require('./lib/routes');

path = require('path');

passport = require('passport');

flash = require('connect-flash');

config = require('./lib/config');

forms = require('./lib/forms');

events = require('events');

sessionStores = require('./lib/session-stores');

container = pimple({
  port: process.env.PORT || 3000,
  youtub_api_key: process.env.EXPRESS_VIDEO_YOUTUBE_API_KEY,
  connection_string: process.env.EXPRESS_VIDEO_MONGODB_CONNECTION_STRING,
  debug: process.env.NODE_ENV === "production" ? false : true
});

container.set("app", container.share(function() {
  var app;
  app = express();
  app.configure(function() {
    app.engine('twig', container.swig.renderFile);
    app.set('view engine', 'twig');
    app.locals(container.locals);
    app.use(express.cookieParser("secret sentence"));
    app.use(express.session({
      store: container.sessionStore
    }));
    app.use(flash());
    app.use(express.bodyParser());
    app.use(container.passport.initialize());
    app.use(container.passport.session());
    app.use(express["static"](path.join(__dirname, "..", "public")));
    app.use(express.favicon());
    app.use(express.compress());
    app.use(container.monolog.middleware());
    return app.disable("verbose errors");
  });
  app.configure('development', function() {
    app.use(express.logger("dev"));
    return app.enable('verbose errors');
  });
  app.configure('testing', function() {
    return app.disable("verbose errors");
  });

  /*
  route map mixin
  mount routes with a single object
  @param routes
  @param prefix
   */
  app.map = function(routes, prefix) {
    var key, value;
    if (prefix == null) {
      prefix = "";
    }
    for (key in routes) {
      value = routes[key];
      switch (typeof value) {
        case "object":
          if (value instanceof Array) {
            value.unshift(prefix);
            this[key].apply(this, value);
          } else {
            this.map(value, prefix + key);
          }
          break;
        default:
          this[key].apply(this, [prefix, value]);
      }
    }
    return this;
  };
  app.map(container.routes.map);

  /*
      error handlers
      @see https://github.com/visionmedia/express/blob/master/examples/error-pages/index.js
   */
  app.use(function(req, res) {
    res.status(404);
    return res.render('404', {
      code: res.statusCode
    });
  });
  app.use(function(err, req, res) {
    app.get('monolog').error(err);
    res.status(err.status || 500);
    return res.render('500');
  });
  return app;
}));

container.set("locals", container.share(function() {
  return {
    title: "mpm.video",
    paginate: function(array, length, start) {
      var divisions, _i, _results;
      if (start == null) {
        start = 0;
      }
      divisions = Math.ceil(array.length / length);
      return (function() {
        _results = [];
        for (var _i = start; start <= divisions ? _i < divisions : _i > divisions; start <= divisions ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(i) {
        return array.slice(i * length, i * length + length);
      });
    }
  };
}));

container.set("swig", container.share(function() {
  swig.setDefaults({
    cache: 'memory'
  });
  return swig;
}));

container.set("routes", container.share(function() {
  routes.passport = container.passport;
  return routes;
}));

container.set("db", container.share(function() {
  database.set("debug", container.debug);
  database.connect(config.connection_string);
  return database;
}));

container.set("User", container.share(function() {
  return container.db.model('User');
}));

container.set("Video", container.share(function() {
  return container.db.model('Video');
}));

container.set("Playlist", container.share(function() {
  return container.db.model('Playlist');
}));

container.set("Session", container.share(function() {
  return container.db.model('Session');
}));

container.set("sessionStore", container.share(function() {
  return new sessionStores.MongooseSessionStore({}, container.Session);
}));

container.set("monolog", container.share(function() {
  var logger;
  logger = new monolog.Logger("express logger");
  logger.addHandler(new monolog.handler.StreamHandler(__dirname + "/../temp/log.txt"));
  logger.middleware = function(message) {
    var init;
    if (message == null) {
      message = "debug";
    }
    init = false;
    return function(req, res, next) {
      if (!init) {
        logger.addProcessor(new monolog.processor.ExpressProcessor(req.app));
        req.app.set('monolog', logger);
        init = true;
      }
      logger.debug("" + message + " " + req.method + " " + req.path + " " + (JSON.stringify(req.headers)));
      return next();
    };
  };
  return logger;
}));

container.set("passport", container.share(function() {
  var LocalStrategy, User;
  LocalStrategy = require('passport-local').Strategy;
  User = container.User;
  passport.serializeUser(function(user, done) {
    return done(null, user.id);
  });
  passport.deserializeUser(function(id, done) {
    return User.findById(id, done);
  });
  passport.use('local-signup', new LocalStrategy({
    usernameField: 'email',
    passwordField: 'password',
    passReqToCallback: true
  }, function(req, email, password, done) {
    return process.nextTick(function() {
      return User.findOne({
        'local.email': email
      }, function(err, user) {
        var newUser;
        if (err) {
          done(err);
        }
        if (user) {
          return done(null, false, req.flash('signupMessage', 'That email is already taken'));
        } else {
          newUser = new User;
          newUser.local.email = email;
          newUser.local.password = newUser.generateHash(password);
          return newUser.save(done);
        }
      });
    });
  }));
  passport.use('local-login', new LocalStrategy({
    usernameField: 'email',
    passwordField: 'password',
    passReqToCallback: true
  }, function(req, email, password, done) {
    return User.findOne({
      'local.email': email
    }, function(err, user) {
      if (err) {
        return done(err);
      }
      if (user) {
        if (user.validPassword(password)) {
          return done(null, user);
        }
      }
      return done(null, false, req.flash('loginMessage', 'Invalid credentials!'));
    });
  }));
  return passport;
}));

container.set("forms", forms);

module.exports = container;

//# sourceMappingURL=container.map
