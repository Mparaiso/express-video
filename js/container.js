// Generated by CoffeeScript 1.7.1
"use strict";
var config, container, events, express, flash, path, pimple, sessionStores, util, _;

express = require('express');

pimple = require('pimple');

util = require('util');

path = require('path');

flash = require('connect-flash');

config = require('./lib/config');

events = require('events');

sessionStores = require('./lib/session-stores');

_ = require('lodash');

container = new pimple({
  port: process.env.PORT || 3000,
  youtub_api_key: process.env.EXPRESS_VIDEO_YOUTUBE_API_KEY,
  connection_string: process.env.EXPRESS_VIDEO_MONGODB_CONNECTION_STRING,
  debug: process.env.NODE_ENV === "production" ? false : true
});

container.set("app", container.share(function() {
  var app, controllers, middlewares;
  app = express();
  middlewares = container.middlewares;
  controllers = container.controllers;
  app.configure(function() {
    app.engine('twig', container.swig.renderFile);
    app.set('view engine', 'twig');
    app.locals(container.locals);
    app.use(express.cookieParser("secret sentence"));
    app.use(express.session({
      store: container.sessionStore
    }));
    app.use(flash());
    app.use(express.bodyParser());
    app.use(container.passport.initialize());
    app.use(container.passport.session());
    app.use(express["static"](path.join(__dirname, "..", "public")));
    app.use(express.favicon());
    app.use(express.compress());
    app.use(container.monolog.middleware());
    return app.disable("verbose errors");
  });
  app.configure('development', function() {
    app.use(express.logger("dev"));
    app.enable('verbose errors');
    return app.use(middlewares.serverError);
  });
  app.configure('testing', function() {
    return app.disable("verbose errors");
  });
  app.map = container.mixins.map;
  app.param('videoId', middlewares.video);
  app.param('playlistId', middlewares.playlist);

  /* protect profile pages */

  /* inject container into current request scope */
  app.use(function(req, res, next) {
    res.locals.container = container;
    return next();
  });
  app.use(middlewares.user);
  app.use(middlewares.flash);
  app.use('/profile', middlewares.isLoggedIn);
  app.use('/profile', middlewares.csrf);
  app.use('/login', middlewares.csrf);
  app.use('/signup', middlewares.csrf);
  app.use('/video', middlewares.csrf);
  app.map({
    "/": {
      get: controllers.index
    },
    "/api/video": {
      use: middlewares.videoApi
    },
    "/api/video.fromUrl": {
      post: controllers.videoFromUrl
    },
    "/api/playlist": {
      use: middlewares.playlistApi
    },
    "/video/:videoId": {
      get: controllers.videoById
    },
    "/playlist/:playlistId": {
      get: controllers.playlistById
    },
    "/category/:categoryId/:categoryTitle?": {
      get: [middlewares.categories, controllers.categoryById]
    },
    "/profile": {
      all: controllers.profile,
      "/video/new": {
        all: controllers.videoCreate
      },
      "/video": {
        all: controllers.videoList
      },
      "/video/:videoId/update": {
        all: [middlewares.belongsToUser(container.Video, 'video'), controllers.videoUpdate]
      },
      '/video/:videoId/remove': {
        post: [middlewares.belongsToUser(container.Video, 'video'), controllers.videoRemove]
      },
      '/playlist': {
        get: controllers.playlistList
      },
      '/playlist/update/:playlistId': {
        all: [middlewares.belongsToUser(container.Playlist, 'playlist'), controllers.playlistUpdate]
      },
      '/playlist/delete/:playlistId': {
        all: [middlewares.belongsToUser(container.Playlist, 'playlist'), controllers.playlistRemove]
      },
      '/playlist/new': {
        all: controllers.playlistCreate
      }
    },
    "/login": {
      get: controllers.login,
      post: container.passport.authenticate('local-login', {
        successRedirect: '/profile',
        failureRedirect: '/login',
        failureFlash: true
      })
    },
    "/signup": {
      get: controllers.signup,
      post: [
        controllers.signupPost, container.passport.authenticate('local-signup', {
          successRedirect: '/profile',
          failureRedirect: '/signup',
          failureFlash: true
        })
      ]
    },
    "/logout": {
      get: controllers.logout
    },
    "/search": {
      get: controllers.videoSearch
    }
  });
  app.use(middlewares.notFound);
  app.on('error', function(err) {
    return container.mongolog.error(err);
  });
  return app;
}));

container.set("locals", container.share(function() {
  return {
    title: "mpm.video",
    logopath: "/images/video-big.png",
    paginate: function(array, length, start) {
      var divisions, _i, _results;
      if (start == null) {
        start = 0;
      }
      divisions = Math.ceil(array.length / length);
      return (function() {
        _results = [];
        for (var _i = start; start <= divisions ? _i < divisions : _i > divisions; start <= divisions ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(i) {
        return array.slice(i * length, i * length + length);
      });
    }
  };
}));

container.set("swig", container.share(function(c) {
  var swig;
  swig = require('swig');
  swig.setDefaults({
    cache: c.config.swig_cache
  });
  return swig;
}));

container.set("db", container.share(function() {
  var database;
  database = require('./lib/database');
  database.set("debug", container.config.mongoose_debug);
  database.connect(container.config.connection_string);
  return database;
}));

container.set("User", container.share(function() {
  return container.db.model('User');
}));

container.set("Category", container.share(function() {
  return container.db.model('Category');
}));

container.set("Video", container.share(function() {
  return container.db.model('Video');
}));

container.set("Playlist", container.share(function() {
  return container.db.model('Playlist');
}));

container.set("Session", container.share(function() {
  return container.db.model('Session');
}));

container.set("sessionStore", container.share(function() {
  return new sessionStores.MongooseSessionStore({}, container.Session);
}));

container.set("monolog", container.share(function() {
  var logger, monolog;
  monolog = require('monolog');
  logger = new monolog.Logger("express logger");
  logger.addHandler(new monolog.handler.StreamHandler(__dirname + "/../temp/log.txt"));
  logger.middleware = function(message) {
    var init;
    if (message == null) {
      message = "debug";
    }
    init = false;
    return function(req, res, next) {
      if (!init) {
        logger.addProcessor(new monolog.processor.ExpressProcessor(req.app));
        req.app.set('monolog', logger);
        init = true;
      }
      logger.debug("" + message + " " + req.method + " " + req.path + " " + (JSON.stringify(req.headers)));
      return next();
    };
  };
  return logger;
}));

container.set("passport", container.share(function() {
  var LocalStrategy, User, passport;
  passport = require('passport');
  LocalStrategy = require('passport-local').Strategy;
  User = container.User;
  passport.serializeUser(function(user, done) {
    return done(null, user.id);
  });
  passport.deserializeUser(function(id, done) {
    return User.findById(id, done);
  });
  passport.use('local-signup', new LocalStrategy({
    usernameField: 'email',
    passwordField: 'password',
    passReqToCallback: true
  }, function(req, email, password, done) {
    return process.nextTick(function() {
      return User.findOne({
        'local.email': email
      }, function(err, user) {
        var newUser;
        if (err) {
          done(err);
        }
        if (user) {
          return done(null, false, req.flash('signupMessage', 'That email is already taken'));
        } else {
          newUser = new User();
          newUser.username = req.body.username;
          newUser.local.email = email;
          newUser.local.password = newUser.generateHash(password);
          return newUser.save(done);
        }
      });
    });
  }));
  passport.use('local-login', new LocalStrategy({
    usernameField: 'email',
    passwordField: 'password',
    passReqToCallback: true
  }, function(req, email, password, done) {
    return User.findOne({
      'local.email': email
    }, function(err, user) {
      if (err) {
        return done(err);
      }
      if (user) {
        if (user.validPassword(password)) {
          return done(null, user);
        }
      }
      return done(null, false, req.flash('loginMessage', 'Invalid credentials!'));
    });
  }));
  return passport;
}));

container.set("forms", container.share(function() {
  return require('./lib/forms');
}));

container.set("middlewares", container.share(function() {
  return require('./lib/middlewares');
}));

container.set("controllers", container.share(function() {
  return require('./lib/controllers');
}));

container.set("mixins", container.share(function() {
  return require('./lib/mixins');
}));

container.set("parsers", container.share(function() {
  return require('./lib/parsers');
}));

container.set("config", container.share(function() {
  return require('./lib/config');
}));

container.set("Categories", container.share(function() {
  var data;
  data = require('../data/youtubeVideoCategories.json').items.map(function(item) {
    return {
      title: item.snippet.title,
      id: item.id
    };
  });
  return {
    findAll: function() {
      return data;
    },
    findById: function(id) {
      return _.find(data, function(item) {
        return String(item.id) === String(id);
      });
    },
    whereVideoExist: function(options) {
      var callback;
      if (options instanceof Function) {
        callback = options;
        options = {};
      }
      return container.Video.aggregate([
        {
          $match: {
            categoryId: {
              $exists: true
            }
          }
        }, {
          $group: {
            _id: "$categoryId",
            total: {
              $sum: 1
            }
          }
        }, {
          $project: {
            id: "$_id"
          }
        }
      ]).exec().then((function(_this) {
        return function(categories) {
          return _.map(categories, function(cat) {
            return _.extend(cat, {
              title: _.find(data, function(d) {
                return String(d.id) === String(cat.id);
              }).title
            });
          });
        };
      })(this));
    }
  };
}));

module.exports = container;

//# sourceMappingURL=container.map
