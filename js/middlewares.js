// Generated by CoffeeScript 1.7.1
module.exports = function(container) {
  return container.set('middlewares', container.share(function(c) {
    var middlewares, q, _;
    q = c.q;
    _ = c._;

    /* 
     * MIDDLEWARES 
     * @namespace
     */
    middlewares = {};

    /*
        Makes the csrf token mandatory
        add _csrf to res.locals and headers
     */
    middlewares.csrf = function(req, res, next) {
      return (c.express.csrf())(req, res, function(err) {
        if (err) {
          return next(err);
        } else {
          res.locals._csrf = req.csrfToken();
          res.set('_csrf', res.locals._csrf);
          return next();
        }
      });
    };
    middlewares.video = function(req, res, next, id) {
      return c.Video.findOneById(id).then(function(video) {
        var err;
        if (!video) {
          err = new Error('Video not found');
          err.status = 404;
          return err;
        } else {
          res.locals.video = video;
          return next();
        }
      })["catch"](next);
    };
    middlewares.playlist = function(req, res, next, id) {
      return c.Playlist.findById(id).where({
        "private": false
      }).populate('videos owner').exec(function(err, playlist) {
        if (err) {
          err.status = 500;
          return next(err);
        } else if (!playlist) {
          err = new Error("Playlist with id " + id + " not found");
          err.status = 404;
          return next(err);
        } else {
          res.locals.playlist = playlist;
          return next();
        }
      });
    };
    middlewares.categories = (function(req, res, next) {
      return c.Category.whereVideoExist().then(function(categories) {
        res.locals.categories = categories;
        return next();
      }, next);
    });
    middlewares.belongsToUser = function(model, param) {
      return function(req, res, next) {
        return model.findOne({
          _id: res.locals[param].id,
          owner: req.user.id
        }).exec(function(err, res) {
          if (err) {
            err.status = 403;
            return next(err);
          } else if (!res) {
            err = new Error("Access to resource " + param + " for " + req.user + " forbidden");
            return next(err);
          } else {
            return next();
          }
        });
      };
    };
    middlewares.user = function(req, res, next) {
      if (req.isAuthenticated()) {
        res.locals.isAuthenticated = true;
        res.locals.user = req.user;
      } else {
        delete res.locals.user;
        delete res.locals.isAuthenticated;
      }
      return next();
    };
    middlewares.isLoggedIn = function(req, res, next) {
      if (req.isAuthenticated()) {
        return next();
      } else {
        return res.redirect('/login');
      }
    };
    middlewares.cache = function(req, res, next) {
      if (req.method === "GET" && req.app.get('env') === "production") {
        res.header('Cache-Control', "max-age=" + 5);
        res.header('X-Powered-By', 'mparaiso mparaiso@online.fr');
      }
      return next();
    };
    middlewares.flash = function(req, res, next) {
      res.locals.flash = req.flash();
      return next();
    };

    /*
     * @TODO rethink apis
    middlewares.videoApi = do ->
        controller = new Rest.Controller(c.express(),{allow:['list','get']})
        controller.setAdapter(new Rest.adapter.MongooseAdapter(c.Video))
        controller.handle()
    
    middlewares.playlistApi = do ->
        controller = new Rest.Controller(c.express(),{allow:['list','get']})
        controller.setAdapter(new Rest.adapter.MongooseAdapter(c.Playlist))
        controller.handle()
     */

    /*
    error handlers
    @see https://github.com/visionmedia/express/blob/master/examples/error-pages/index.js
     */
    middlewares.error = function(err, req, res, next) {
      c.logger.error(err);
      switch (String(err.status)) {
        case '404':
          return res.render('404');
        default:
          return res.render('500');
      }
    };
    middlewares.requestLogger = function(req, res, next) {
      res.once('finish', function() {
        var message;
        message = {
          request: _.pick(req, ['headers', 'trailers', 'method', 'url', 'statusCode', 'ip', 'port', 'user', 'error', "err"]),
          response: _.pick(res, ['statusCode', 'trailers', 'headers', 'error', "err"])
        };
        if (res.statusCode >= 400) {
          return container.logger.error(message);
        } else {
          return container.logger.info(message);
        }
      });
      return next();
    };
    return middlewares;
  }));
};

//# sourceMappingURL=middlewares.map
